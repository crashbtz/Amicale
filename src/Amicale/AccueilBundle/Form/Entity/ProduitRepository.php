<?php

namespace Amicale\AccueilBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{
    public function findAll($array_criteria = null, $array_sort = null) {
        return $this->getProduits();
    }
    
    public function getProduits($array_criteria = null, $array_sort = null)
    {
        $query = $this->createQueryBuilder('p')
                    ->leftJoin('p.typeProduit', 't')
                    ->orderBy('p.titre', 'asc')
                    ->addOrderBy('t.nom', 'asc');
                 
        return $query->getQuery()->getResult();
    }
    
    /**
     * retourne les enregistrements les plus récents dont le nombre est définit par le param $nombre
     * @author CMO
     * @param type $nombre
     * @return Produit Collection
     */
    public function getLastRecents($nombre){
        $query = $this->_em->createQuery('SELECT p FROM AmicaleAccueilBundle:Produit p WHERE p.photo is not null ORDER BY p.updatedAt DESC');
        $query->setMaxResults($nombre);
        return $query->getResult();
    }
    
    public function findByCategorie($id){
        $query = $this->createQueryBuilder('p')
                ->leftJoin('p.typeProduit', 't')
                ->leftJoin('t.categorie', 'c')
                ->where('c.id = :id')
                ->setParameter('id', $id)
                ->orderBy('p.titre');
        return $query->getQuery()->getResult();
    }
    
    /**
     * retourne des produits selon certains filtres
     * @param type $typeproduits
     * @param type $min
     * @param type $max
     * @return Produit Collection
     */
    public function findByTypeproduitsAndPrix($typeproduits, $min, $max){
        $query = $this->createQueryBuilder('p');
        
        $query->add('where', $query->expr()->in('p.typeProduit', $typeproduits));
        
        if($min != ''){
            $query->andWhere('p.prix >= :min')
                    ->setParameter('min', $min);
        }
        if($max != ''){
            $query->andWhere('p.prix <= :max')
                    ->setParameter('max', $max);
        }
                
        $query->orderBy('p.titre');
        
        return $query->getQuery()->getResult();
    }
    
}
